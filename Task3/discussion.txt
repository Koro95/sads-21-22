Part 1:
	- No Constrains -> doesn't map anything (cost 0)
	- +encodeTaskMappingNecessity -> map both tasks on the cheaper resource (cost 2)
	- +encodeNoResourceSharing -> has to map tasks on different resources (cost 3)
	
Part 2:

ConstraintEvaluator:
	- similar to last week, count violations and add them as objective
	- can only be evaluated after a solution has been generated
	
SAT Encoding:
	- encodeTaskMappingNecessityConstraint -> same as from example
		--> - T + sum (M) >= 0
	- encodeMaxTwoTasksEdgeResourceConstraints -> adapted from example encodeNoResourceSharing
	  for edge resources and 2 instead of 1
	  	--> sum (M(R)) <= 2
	- encodeNoSecretTaskOnCloudConstraints -> Mapping = 0, if task secret and resource cloud
		--> Mapping.SecretCloud = 0
	- encodeSecretMessagesSameRegionConstraints -> if the tasks of the two messages are secret and
		in different regions, only one of the mappings can be active (not both at the same time)
		--> M1 + M2 <= 1
		
Comparison:
	- seed = 42, function length min=4 and max=5
	- Evaluator:
		- 30 Iterations took 9min40sec
		- evaluator_mapping_cost.png and evaluator_constraint_violations.png
		- Mapping cost from 47 to 31
		- Constraint violations from 13 to 12
		- Still has violations, which should be 0 (perfectly safe application according to the
		  constraints), and therefore has lower mapping cost than SAT
	- SAT:
		- 30 iterations took 15min44sec
		- sat_mapping_cost.png
		- Mapping cost from 103 to 95
		- Constraint violations always 0, because it doesn't consider solutions with violations
		- Therefore higher mapping cost because it always adheres to the constraints
	- Evaluator is faster than SAT and has lower mapping cost, but will probably always have
	  some constraint violations, because it is just an objective
	- SAT takes longer, but always has solution with 0 constraint violations, which is most of
	  the time preferred if the constraints are a requirement for a correct/safe application